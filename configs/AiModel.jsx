const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });

    export const GenAiCode=model.startChat({
      generationConfig: CodeGenerationConfig,
      history:[
        {
          "role": "user",
          "parts": [
            {text: "Generate to do app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   ", }
          ],
        },
        {
          "role": "model",
          "parts": [
            {text: "```json\n{\n  \"projectTitle\": \"TaskMaster: A Modern To-Do Application\",\n  \"explanation\": \"TaskMaster is a comprehensive to-do application built with React and styled with Tailwind CSS. It features a clean and intuitive interface for managing tasks, including adding, editing, deleting, and marking tasks as complete. The application also includes features like task prioritization, due dates, and categories to help users stay organized. The project is structured into multiple components, each responsible for a specific part of the UI, such as task lists, forms, and navigation. It leverages Lucide React icons for a visually appealing and user-friendly experience.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList';\\nimport TaskForm from './components/TaskForm';\\nimport Header from './components/Header';\\nimport Footer from './components/Footer';\\nimport { format } from 'date-fns';\\nimport { Line } from 'react-chartjs-2';\\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\\n\\nChartJS.register(\\n  CategoryScale,\\n  LinearScale,\\n  PointElement,\\n  LineElement,\\n  Title,\\n  Tooltip,\\n  Legend,\\n  Filler\\n);\\n\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const storedTasks = localStorage.getItem('tasks');\\n    return storedTasks ? JSON.parse(storedTasks) : [];\\n  });\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (task) => {\\n    setTasks([...tasks, task]);\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter((task) => task.id !== id));\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(\\n      tasks.map((task) =>\\n        task.id === id ? { ...task, completed: !task.completed } : task\\n      )\\n    );\\n  };\\n\\n    const getTaskCompletionRateData = () => {\\n      const labels = tasks.map(task => format(new Date(task.dueDate), 'MMM dd'));\\n      const completionRate = tasks.map(task => task.completed ? 100 : 0);\\n\\n      const data = {\\n        labels,\\n        datasets: [\\n          {\\n            label: 'Task Completion Rate (%)',\\n            data: completionRate,\\n            fill: false,\\n            backgroundColor: 'rgb(75, 192, 192)',\\n            borderColor: 'rgba(75, 192, 192, 0.2)',\\n          },\\n        ],\\n      };\\n\\n      return data;\\n    };\\n\\n  const options = {\\n    responsive: true,\\n    plugins: {\\n      legend: {\\n        position: 'top',\\n      },\\n      title: {\\n        display: true,\\n        text: 'Task Completion Rate Over Time',\\n      },\\n    },\\n  };\\n\\n  return (\\n    <div className=\\\"bg-gray-100 min-h-screen py-10\\\">\\n      <Header />\\n      <div className=\\\"container mx-auto px-4\\\">\\n        <h1 className=\\\"text-3xl font-bold text-center mb-8 text-gray-800\\\">ðŸŽ¯ TaskMaster: Get Things Done!</h1>\\n        <TaskForm addTask={addTask} />\\n        <TaskList tasks={tasks} deleteTask={deleteTask} toggleComplete={toggleComplete} />\\n\\n        {tasks.length > 0 && (\\n           <div className=\\\"mt-8\\\">\\n            <h2 className=\\\"text-xl font-semibold mb-4 text-gray-700\\\">ðŸ“ˆ Completion Rate Chart</h2>\\n              <Line options={options} data={getTaskCompletionRateData()} />\\n           </div>\\n        )}\\n      </div>\\n      <Footer />\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\n      \"dependencies\": [\n        \"react\",\n        \"./components/TaskList\",\n        \"./components/TaskForm\",\n        \"./components/Header\",\n        \"./components/Footer\",\n        \"date-fns\",\n        \"react-chartjs-2\"\n      ]\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport TaskItem from './TaskItem';\\n\\nfunction TaskList({ tasks, deleteTask, toggleComplete }) {\\n  return (\\n    <div className=\\\"mt-4\\\">\\n      {tasks.length === 0 ? (\\n        <p className=\\\"text-gray-600 italic text-center\\\">ðŸŽ‰ You have no tasks! Add some to get started.</p>\\n      ) : (\\n        tasks.map((task) => (\\n          <TaskItem key={task.id} task={task} deleteTask={deleteTask} toggleComplete={toggleComplete} />\\n        ))\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport default TaskList;\\n\",\n      \"dependencies\": [\n        \"react\",\n        \"./TaskItem\"\n      ]\n    },\n    \"/components/TaskItem.js\": {\n      \"code\": \"import React from 'react';\\nimport { Trash, Edit, Check } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction TaskItem({ task, deleteTask, toggleComplete }) {\\n  return (\\n    <div className=\\\"flex items-center justify-between py-2 px-4 bg-white rounded-md shadow-md hover:shadow-lg transition-shadow duration-300 mb-2\\\">\\n      <div>\\n        <input\\n          type=\\\"checkbox\\\"\\n          id={`task-${task.id}`}\\n          checked={task.completed}\\n          onChange={() => toggleComplete(task.id)}\\n          className=\\\"mr-2 leading-tight text-green-500 focus:ring-green-500\\\"\\n        />\\n        <label htmlFor={`task-${task.id}`} className={`text-gray-800 ${task.completed ? 'line-through text-gray-500' : ''}`}>\\n          {task.title}\\n        </label>\\n        {task.dueDate && (\\n          <div className=\\\"text-sm text-gray-500\\\">\\n            Due Date: {format(new Date(task.dueDate), 'MMM dd, yyyy')}\\n          </div>\\n        )}\\n      </div>\\n      <div className=\\\"space-x-2\\\">\\n        <button onClick={() => toggleComplete(task.id)} aria-label=\\\"Mark as Complete\\\" className=\\\"text-green-500 hover:text-green-700 focus:outline-none\\\">\\n          <Check className=\\\"h-5 w-5\\\" />\\n        </button>\\n        <button onClick={() => deleteTask(task.id)} aria-label=\\\"Delete Task\\\" className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\">\\n          <Trash className=\\\"h-5 w-5\\\" />\\n        </button>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default TaskItem;\\n\",\n      \"dependencies\": [\n        \"react\",\n        \"lucide-react\",\n        \"date-fns\"\n      ]\n    },\n    \"/components/TaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction TaskForm({ addTask }) {\\n  const [title, setTitle] = useState('');\\n  const [dueDate, setDueDate] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (title.trim() === '') return;\\n    addTask({ id: Date.now(), title, completed: false, dueDate });\\n    setTitle('');\\n    setDueDate('');\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\\\">\\n      <div className=\\\"mb-4\\\">\\n        <label className=\\\"block text-gray-700 text-sm font-bold mb-2\\\" htmlFor=\\\"taskTitle\\\">\\n          Task Title:\\n        </label>\\n        <input\\n          className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n          id=\\\"taskTitle\\\"\\n          type=\\\"text\\\"\\n          placeholder=\\\"Enter task title\\\"\\n          value={title}\\n          onChange={(e) => setTitle(e.target.value)}\\n        />\\n      </div>\\n      <div className=\\\"mb-6\\\">\\n        <label className=\\\"block text-gray-700 text-sm font-bold mb-2\\\" htmlFor=\\\"dueDate\\\">\\n          Due Date (Optional):\\n        </label>\\n        <input\\n          className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n          id=\\\"dueDate\\\"\\n          type=\\\"date\\\"\\n          value={dueDate}\\n          onChange={(e) => setDueDate(e.target.value)}\\n        />\\n      </div>\\n      <div className=\\\"flex items-center justify-between\\\">\\n        <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline flex items-center\\\" type=\\\"submit\\\">\\n          <Plus className=\\\"h-5 w-5 mr-2\\\" />\\n          Add Task\\n        </button>\\n      </div>\\n    </form>\\n  );\\n}\\n\\nexport default TaskForm;\\n\",\n      \"dependencies\": [\n        \"react\",\n        \"lucide-react\"\n      ]\n    },\n    \"/components/Header.js\": {\n      \"code\": \"import React from 'react';\\nimport { Clock } from 'lucide-react';\\n\\nfunction Header() {\\n  return (\\n    <header className=\\\"bg-blue-500 text-white py-4 shadow-md\\\">\\n      <div className=\\\"container mx-auto px-4 flex items-center justify-between\\\">\\n        <div className=\\\"flex items-center\\\">\\n          <Clock className=\\\"h-6 w-6 mr-2\\\" />\\n          <h1 className=\\\"text-2xl font-semibold\\\">TaskMaster</h1>\\n        </div>\\n        <nav>\\n          {/* Future navigation links can go here */}\\n        </nav>\\n      </div>\\n    </header>\\n  );\\n}\\n\\nexport default Header;\\n\",\n      \"dependencies\": [\n        \"react\",\n        \"lucide-react\"\n      ]\n    },\n    \"/components/Footer.js\": {\n      \"code\": \"import React from 'react';\\n\\nfunction Footer() {\\n  const currentYear = new Date().getFullYear();\\n\\n  return (\\n    <footer className=\\\"bg-gray-200 text-gray-600 py-4 mt-8 text-center\\\">\\n      <p>&copy; {currentYear} TaskMaster. All rights reserved.</p>\\n    </footer>\\n  );\\n}\\n\\nexport default Footer;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TaskList.js\",\n    \"/components/TaskItem.js\",\n    \"/components/TaskForm.js\",\n    \"/components/Header.js\",\n    \"/components/Footer.js\"\n  ]\n}\n```",}
          ],
        },
      ],
    })
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());